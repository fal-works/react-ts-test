{"version":3,"sources":["Tweet.tsx","Timeline.tsx","TweetInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tweet","props","_React$useState","React","useState","_React$useState2","Object","slicedToArray","liked","setLike","toggleLike","useCallback","prev","react_default","a","createElement","className","icon","displayName","accountName","content","onClick","Timeline","tweetList","tweets","map","tw","src_Tweet","key","TweetInput","textareaRef","useRef","sendTweet","current","addTweet","Date","getTime","value","ref","App","initialTweets","setTweets","tweet","concat","toConsumableArray","src_TweetInput","src_Timeline","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.78892d22.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport interface TweetProps {\r\n  key: number;\r\n  content: string;\r\n  icon: string;\r\n  displayName: string;\r\n  accountName: string;\r\n}\r\n\r\nconst Tweet: React.FC<TweetProps> = (props): JSX.Element => {\r\n  const [liked, setLike] = React.useState(false);\r\n  const toggleLike = React.useCallback(() => setLike(prev => !prev), [setLike]);\r\n\r\n  return (\r\n    <div className=\"tweet\">\r\n      <div className=\"icon-container\">{props.icon}</div>\r\n      <div className=\"body-container\">\r\n        <div className=\"status-display\">\r\n          <span className=\"display-name\">{props.displayName}</span>\r\n          <span className=\"account-name\">@{props.accountName}</span>\r\n        </div>\r\n        <div className=\"content\">{props.content}</div>\r\n        <div className=\"status-action\">\r\n          <span onClick={toggleLike}>{liked ? '‚ù§Ô∏è' : '‚ô°'}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import React from 'react';\r\nimport Tweet, { TweetProps } from './Tweet';\r\n\r\nexport interface TimelineProps {\r\n  tweets: TweetProps[];\r\n}\r\n\r\nconst Timeline: React.FC<TimelineProps> = (props): JSX.Element => {\r\n  // props„Åã„ÇâTweet„ÅÆ„É™„Çπ„Éà„Çí‰Ωú„Çã\r\n  const tweetList = props.tweets.map(tw => (\r\n    <Tweet\r\n      key={tw.key}\r\n      icon={tw.icon}\r\n      displayName={tw.displayName}\r\n      accountName={tw.accountName}\r\n      content={tw.content}\r\n    />\r\n  ));\r\n\r\n  // Ë°®Á§∫„Åô„Çã\r\n  return <div className=\"timeline\">{tweetList}</div>;\r\n};\r\n\r\nexport default Timeline;\r\n","import React from 'react';\r\nimport { TweetProps } from './Tweet';\r\n\r\nexport interface TweetInputProps {\r\n  addTweet: (tweet: TweetProps) => void;\r\n}\r\n\r\nconst TweetInput: React.FC<TweetInputProps> = (props): JSX.Element => {\r\n  // Ë¶ÅÁ¥†„Å´„Ç¢„ÇØ„Çª„Çπ„Åô„Çã„Åü„ÇÅ„ÅÆÂèÇÁÖß„ÇíÂèñÂæó\r\n  // ref.current„ÅÆ„Éá„Éï„Ç©„É´„ÉàÂÄ§„ÅØnull„Å´„Åó„Å¶„Åä„Åè\r\n  // ÂèÇÁÖß„Åó„Åü„ÅÑË¶ÅÁ¥†„Å´JSX„ÅÆÊñπ„Åß„Åì„ÅÆref„Çí„Çª„ÉÉ„Éà„Åô„Çã\r\n  const textareaRef = React.useRef<HTMLTextAreaElement>(null);\r\n\r\n  // Tweet„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞„Çí‰Ωú„Å£„Å¶‰øùÂ≠ò\r\n  // textareaRef.current„Åãprops.addTweet„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„Çâ\r\n  // „Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞„Çí‰Ωú„ÇäÁõ¥„Åó\r\n  const sendTweet = React.useCallback(() => {\r\n    // ref„ÅÆcurrent„Å´ÂÖ•„Å£„Å¶„ÅÑ„ÇãÂÄ§„ÅåDOM\r\n    // ÂàùÊúüÂÄ§„ÅØnullÔºà‰∏ä„ÅßÊåáÂÆö„Åó„ÅüÔºâ„Åß„ÄÅ\r\n    // ÂÆüÈöõ„Å´HTMLÂÅ¥„Å´ÊèèÁîª„Åï„Çå„Çã„Å®ÂÄ§„ÅåÂÖ•„Çä„Åæ„Åô\r\n    if (textareaRef.current) {\r\n      props.addTweet({\r\n        key: new Date().getTime(), // ID„ÅØ„É¶„Éã„Éº„ÇØ„Å™ÂÄ§„Å´„Åô„Çã\r\n        icon: '‚ò†Ô∏è', // „Åì„ÅÆ„ÅÇ„Åü„Çä„ÅÆÂÄ§„ÅØÂ•Ω„Åç„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ\r\n        displayName: '„Éü„Çπ„Çø„ÉºÊ≠ª',\r\n        accountName: 'mrdeath',\r\n        content: textareaRef.current.value\r\n      });\r\n    }\r\n  }, [textareaRef.current, props.addTweet]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <textarea className=\"tweet-textarea\" ref={textareaRef} />\r\n      </div>\r\n      <div>\r\n        <button onClick={sendTweet} className=\"send-tweet\">\r\n          Tweet\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TweetInput;\r\n","import React from 'react';\nimport { TweetProps } from './Tweet';\nimport Timeline from './Timeline';\nimport TweetInput from './TweetInput';\nimport './App.css';\n\nconst App: React.FC = (): JSX.Element => {\n  const [initialTweets, setTweets] = React.useState<TweetProps[]>([\n    {\n      key: 0,\n      icon: 'üåΩ',\n      displayName: '„ÇÇ„Çç„Åì„ÅóÂ§™ÈÉé',\n      accountName: 'morokoshi',\n      content: '‰ªäÊó•„ÇÇ1Êó•„ÇÇ„Çç„Åì„Åó„Åå„ÅÜ„Åæ„ÅÑ'\n    },\n    {\n      key: 1,\n      icon: 'ü¶ê',\n      displayName: '„Ç®„Éì„Éá„É≥„Çπ',\n      accountName: 'evidence',\n      content: '„Åã„Å´„Åø„Åù„Åü„Åπ„Åü„ÅÑ'\n    }\n  ]);\n\n  const addTweet = React.useCallback<(tweet: TweetProps) => void>(\n    tweet => setTweets(prev => [tweet, ...prev]),\n    [setTweets]\n  );\n\n  return (\n    <div>\n      <TweetInput addTweet={addTweet} />\n      <Timeline tweets={initialTweets} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n// serviceWorker.unregister();\n"],"sourceRoot":""}